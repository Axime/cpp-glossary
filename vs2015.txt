+++++++++++++++++++++++++++++++++++++++
 glossary
+++++++++++++++++++++++++++++++++++++++

Configuration       配置名字，通常是Debug或者Release
IntDir              编译器使用的中间目录，产出obj文件
OutDir              链接器使用的输出目录
ProjectDir          项目目录
ProjectName         项目名字
SolutionDir         解决方案目录
TargetDir           目标输出文件所在的目录
TargetExt           目标输出的扩展名
TargetFileName      目标输出文件名，包括扩展名
TargetName          目标输出名，不包括扩展名
TargetPath          目标输出文件的全路径名

TargetDir是目标目录，是一个目录。而TargetPath是目标路径，包括具体的文件名。



====================================================================================================
程序生成顺序
----------------------------------------------------------------------------------------------------
1. 预生成要依赖的项目...
2. 预编译事件!!
3. 编译当前项目...
4. 预链接事件!!
5. 链接当前项目...
6. 后期生成事件!!


issue:
1. 模块定义文件（def）??




====================================================================================================
项目结构
----------------------------------------------------------------------------------------------------

lib     - 静态库
include - 第三方库头文件
bin     - 存在动态链接库和执行文件（输出目录）
def文件 - 模块定义文件，可防止DLL里的命名变更



- 属性 -> 配置: 设定为“所有配置”，这样可以同时设定 debug\release 下的配置

- 解决方案: sln文件所在folder，总文件夹，相当于workspace（$(SolutionDir)）
- 项目工程: vcxproj文件所在folder（$(ProjectDir)）
- vcxproj文件: 管理生成事件，要编译的源码文件（相对$(ProjectDir)路径）
- vcxproj.filters文件: 与vcxproj文件同一目录，管理源码文件在项目中的位置（项目路径）
- 属性表props文件: 将项目的相关配置独立出来，避免每次都重复配置项目，方便复用

- 常规 -> 输出目录: 定义（$(OutDir)）
- 常规 -> 中间目录: 放置obj、log等编译产生文件（$(IntDir)）
- 常规 -> 目标文件名: 默认为$(ProjectName)

- 调试 --> 命令: 调试启动时的exe文件全路径名称（默认为$(TargetPath)，无需修改）
- 调试 --> 工作目录: 默认为$(ProjectDir)
    
- vc++目录 -> 包含目录: 系统（全局）的头文件搜索目录
- vc++目录 -> 库目录: 系统（全局）的lib文件搜索目录

- c/c++ -> 常规 -> 附加包含目录: 头文件搜索目录（相对$(ProjectDir)路径，$(ProjectDir)目录自动加入）
- c/c++ -> 预处理器 -> 预处理器定义: 由系统设置的宏定义
    NDEBUG: 表示没有debug
    _CRT_SECURE_NO_WARNINGS: 忽略c runtime安全警告
    WIN32: 
- c/c++ -> 高级 -> 禁用特定警告: 4267..4251..4244..4996

- 链接器 -> 常规 -> 输出文件: exe文件所在的位置（$(TargetDir)）
- 链接器 -> 常规 -> 附加库目录: lib文件搜索目录（相对$(ProjectDir)路径，$(ProjectDir)目录自动加入）
- 链接器 -> 输入 -> 附加依赖项: 要使用的lib文件（xxx.lib）
- 链接器 -> 输入 -> 模块定义文件: 指定def文件

- 生成事件 -> 预先生成事件: 编译之前，需要做的事
- 生成事件 -> 预链接事件: 链接前（编译后），需要做的事（例如拷贝lib文件）
- 生成事件 -> 后期生成事件: 编译并链接成功之后，需要做的事
    md $(SolutionDir)..\bin\$(ConfigurationName)
    copy $(TargetPath) $(SolutionDir)..\bin\$(ConfigurationName)
    copy $(SolutionDir)..\3rd\dll\$(ConfigurationName) $(SolutionDir)..\bin\$(ConfigurationName)

ps. 在一个解决方案中有多个项目时，常需要拷贝一些文件，这个就需要用到vs的生成事件。



====================================================================================================
DLL:
----------------------------------------------------------------------------------------------------
添加工程引用的dll动态库：把引用的dll放到工程的可执行文件所在的目录下。



项目编译的中间目录；
项目链接的输出目录；
项目编译结束后，拷贝生成的 dll 和 lib 到指定目录；
项目编译结束后，拷贝需要的 dll 到输出目录；
设置项目的工作目录；
设置调试时执行的 exe 和工作目录；















    