==================================================
右值引用
--------------------------------------------------
作用A: 
废物利用，资源转移。

左值引用: 通常为具名对象，复制...也就是普通引用。
右值引用: 通常为无名对象，转移...行为上类似于左值，马上就会被销毁，以后也不会再被用到(匿名临时对象、返回值)。

ps.
1. 右值引用也是左值，判断标准是该右值引用是否有名字。(也就是说，即使传入的参数是右值，但因为参数本身有名字，所以还要借助move方法转换!!!!!)
2. 左值引用不可被当做右值。(形参为右值，则实参不可为左值)
3. 当实参为右值时，方法调用优先级: foo(const A&& v) -> foo(A&& v) -> foo(const A& v) -> foo(A& v)

转移语义:
将资源从一个对象转移到另一个对象，减少不必要的临时对象的创建、拷贝以及销毁(从而大幅提升性能)。

默认拷贝/移动函数:
构造 - A::A(const A&)             / A::A(A&&)
赋值 - A& A::operator= (const A&) / A& A::operator= (A&&)
ps.
1. 如果自定义，系统将不会自动提供。
2. T& v = getRValue()和const T& v = getRValue()，第一个会导致编译错误，第二个则不会(常量左值引用可接受一切引用类型...)。

关联方法:
std::move - 将具名的右值引用(此时表面上是左值引用)，强制转换成无名的右值引用。

编译器优化(复制省略):
1. 当一个函数参数以传值方式传递时，虽然编译器通常被要求建立一份拷贝，但当源对象是右值时，不需要复制而直接使用源对象本身。例如: foo(string v);foo("AAA");
2. RVO(返回值优化)，调用函数在其栈上分配空间，并将地址传给被调用函数，被调用函数函数可以在这块内存直接上"构造返回值"，以消除复制。例如: NodeAA v = createNode();

引用折叠/引用消除:
只有任一为左值，结果即为左值。例如: T为A&，则T&也为A&，T为A&&，则T&&为A&&。
& + & = &
&& + & = &
& + && = &
&& + && = &&

转移的具体应用:
1. 转移指针
2. 

完美转发:
只需要定义一次，接受一个右值引用的参数，就能将所有参数类型原封不动的传递给目标函数。
例如:
template<typename T> void forward_value(T&& v) { process_value(v); }
int a = 0;
const int& b = 1;
forward_value(a); // int&
forward_value(b); // const int&
forward_value(2); // int&&

关联方法:
std::forward - 暂时用不到...



==================================================
构造函数
--------------------------------------------------
委托构造函数:
语法与成员初始化列表相近。
Notes::Notes(int a, int b) { }
Notes::Notes() : Notes(1, 2) { }

特殊成员函数:
A:A() - 默认构造函数
A::~A() - 析构函数
A::A(const A&) - 复制构造函数
A& A::operator=(const A&) - 复制赋值运算符
c++11新增...
A::A(const A&) - 转移构造函数
A& A::operator=(const A&) - 转移赋值运算符

ps.
1. 关键字default可显式声明特殊成员方法的默认版本。例如: A() = default;
2. 关键字delete可显式禁止使用某特殊成员方法。例如: A(const A&) = delete;(也可将其放在类定义的private部分，效果一样)



==================================================
管理虚方法
--------------------------------------------------
override:
如果subclass在虚函数声明时使用了override描述符，那么必须对其实现。
例如: class B: public A {
  void test() override
}

final:
如果subclass在虚函数声明时使用了final描述符，则禁止其子类再复写该方法。
例如: class B: public A {
  void test() final
}

ps.
1. override和final并非关键字，而是特殊含义的标识符。



==================================================
智能指针
--------------------------------------------------
auto_ptr: c++98时代产物(废除)
shared_ptr: 引用计数 × 共享所有权
unique_ptr: 引用计数 × 独享所有权
weak_ptr:







==================================================
lambda
--------------------------------------------------









==================================================
thread
--------------------------------------------------










==================================================
cocos2dx
--------------------------------------------------
宏定义: do...while(0)或do...while(false)写法:
使其成为独立的block，避免与具体上下文产生关联。例如，if(aPtr) funA();funB()，此时funA可能执行，funB一定执行。










